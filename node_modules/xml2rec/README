<h2>Motivation</h2>
<p>
	Provide a simple way to convert very large (and small) XML files to records of JSON, or CSV files or perform a custom action.
	This is done while still maintaining a small foot-print, and being fast.
	Solutions that load the entire XML wouldn't scale, perform poorly, and may not work if the files are several GBs.
</p>

<h2>Example usages</h2>
<p>For the usage demonstration below let's assume an input file, sample.xml, with the following contents:</p>
<pre>
  &lt;users&gt;
    &lt;user&gt;
      &lt;name&gt;Peter&lt;/name&gt;
      &lt;age&gt;45&lt;/age&gt;
    &lt;/user&gt;
    &lt;user&gt;
      &lt;name&gt;John&lt;/name&gt;
      &lt;age&gt;25&lt;/age&gt;
    &lt;/user&gt;
    &lt;user&gt;
      &lt;name&gt;Cindy&lt;/name&gt;
      &lt;age&gt;32&lt;/age&gt;
    &lt;/user&gt;
    &lt;user&gt;
      &lt;name&gt;Alex&lt;/name&gt;
      &lt;age&gt;15&lt;/age&gt;
    &lt;/user&gt;
  &lt;/users&gt;
</pre>

<p>
	Given that input file, let's see some simple ways to convert it into records.
</p>

<h4>Convert XML and write to a CSV file</h4>
<code><pre>var xml2rec=require('xml2rec');
xml2rec('sample.xml', 'user', 'sample.csv');</pre></code>
Would write the contents below to sample.csv
<pre>
  name, age
  Peter, 45
  John, 25
  Cindy, 32
  Alex, 15
</pre>

<h4>Convert XML and write to a JSON file</h4>
<code><pre>require('xml2rec');
xml2rec('sample.xml', 'user', 'sample.json');</pre></code>
Would write JSON records of <code>user</code> to sample.json

<h4>Convert to CSV</h4>
<code><pre>var xml2rec=require('xml2rec');
xml2rec('sample.xml', ['user'], {}, (err, rec) => {
	console.log(rec);
});</pre></code>
Would output
<pre>
  name, age
  Peter, 45
  John, 25
  Cindy, 32
  Alex, 15
</pre>

<h4>Convert to CSV with no heading</h4>
By default, CSV files are output with a heading. To not output the heading, you
will have to override the default options like so:
<code><pre>var xml2rec=require('xml2rec');
xml2rec('sample.xml', ['user'], {heading:false}, (err, rec) => {
	console.log(rec);
});</pre></code>

Would output
<pre>
  Peter, 45
  John, 25
  Cindy, 32
  Alex, 15
</pre>

<h4>Convert to JSON</h4>
<code><pre>var xml2rec=require('xml2rec');
xml2rec('sample.xml', ['user'], {format:'json'}, (err, rec) => {
	console.log(JSON.stringify(rec));
});</pre></code>

Would output
<pre>
	{name:'Peter', age:45}
	{name:'John', age:25}
	{name:'Cindy', age:32}
	{name:'Alex', age:15}
</pre>

<h2>Features</h2>
When the most common use cases described above does not suffice, the general parameter list below would be the way to go.
For example, wanting to convert XML input into some other format, or updating a database, rendering XML via Jade/Pug are some use-cases.
<code>xml2rec()</code> calls a user supplied callback function cb(err, rec) for every record identified by user supplied list of element name(s).
<code><pre>xml2rec(input_filename, [element_name1, element_name2, ..], {}, function cb(err, rec) {
});</pre></code>
Where
<ul>
	<li><code>input_filename</code>: is the name of the (large) file that needs to be converted</li>
	<li><code>[element_name1, element_name2, ..]</code>: are the list of XML element names in the input file. For each occurrence of the element_name* in the input file, the callback will be called with rec representing the child elements. The type of the object rec depends on the thiird options parameter {}</li>
	<li><code>{}</code>: the options parameter
		<ul>
			<li><code>trimWhiteSpaceTextNodes=true|false</code> // default: true. Nodes that have just white-spaces are treated as empty nodes</li>
			<li><code>trimTrailingSpaces=true|false</code> // default: false. Leading white-spaces in text nodes are removed</li>
			<li><code>trimLeadingSpaces=true|false</code> // default: false. Trailing white-spaces in text nodes are removed</li>
			<li><code>escapeNewLinesInText=true|false</code> // default: false. New lines are replaced with \n</li>
			<li><code>format='csv'|'json'</code> // default: csv</li>
			<li><code>heading=true|false</code> // default: false</li>
			<li><code>outputAttributes=true|false</code> // default: true. Not implemented yet.</li>
		</ul>
	</li>
	<li><code>cb(err, rec): </code> the function to call per parsed record. The value of <code>rec</code> depends on options.fomat's value.
	</li>
</ul>

<p>If preserveWhiteSpaces is true, then the whitespace between XML nodes will be preserved in rec.
Otherwise, they will be <i>eaten</i>.
If format=='csv', the cb()'s rec parameter will be a string --a line with comma separated values,
where each value is the text node of the element_name*'s children.
If format=='json', rec would be a JavaScript object representing the elements' children.
If heading==true, then before calling cb() for each record, cb() will be called once with rec representing
the names of the child elements.</p>
