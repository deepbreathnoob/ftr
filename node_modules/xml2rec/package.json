{
  "_args": [
    [
      {
        "raw": "xml2rec",
        "scope": null,
        "escapedName": "xml2rec",
        "name": "xml2rec",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/pawel/Dokumenty/ElectronAtomJS/Projekty/ftr"
    ]
  ],
  "_from": "xml2rec@latest",
  "_id": "xml2rec@1.0.26",
  "_inCache": true,
  "_location": "/xml2rec",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/xml2rec-1.0.26.tgz_1485471316342_0.44351466884836555"
  },
  "_npmUser": {
    "name": "arunsundaram",
    "email": "arun_co@yahoo.com"
  },
  "_npmVersion": "2.15.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xml2rec",
    "scope": null,
    "escapedName": "xml2rec",
    "name": "xml2rec",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/xml2rec/-/xml2rec-1.0.26.tgz",
  "_shasum": "4273db4b371f9001b94ee67a4b12d84188cabc79",
  "_shrinkwrap": null,
  "_spec": "xml2rec",
  "_where": "/home/pawel/Dokumenty/ElectronAtomJS/Projekty/ftr",
  "author": {
    "name": "Arun Sundaram"
  },
  "dependencies": {
    "node-expat": "^2.3.15"
  },
  "description": "A NodeJS module to convert XML files to records of JSON or CSV format",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "4273db4b371f9001b94ee67a4b12d84188cabc79",
    "tarball": "https://registry.npmjs.org/xml2rec/-/xml2rec-1.0.26.tgz"
  },
  "keywords": [
    "xml2csv",
    "csv",
    "xml2json"
  ],
  "license": "ISC",
  "main": "xml2rec.js",
  "maintainers": [
    {
      "name": "arunsundaram",
      "email": "arun_co@yahoo.com"
    }
  ],
  "name": "xml2rec",
  "optionalDependencies": {},
  "readme": "<h2>Motivation</h2>\n<p>\n\tProvide a simple way to convert very large (and small) XML files to records of JSON, or CSV files or perform a custom action.\n\tThis is done while still maintaining a small foot-print, and being fast.\n\tSolutions that load the entire XML wouldn't scale, perform poorly, and may not work if the files are several GBs.\n</p>\n\n<h2>Example usages</h2>\n<p>For the usage demonstration below let's assume an input file, sample.xml, with the following contents:</p>\n<pre>\n  &lt;users&gt;\n    &lt;user&gt;\n      &lt;name&gt;Peter&lt;/name&gt;\n      &lt;age&gt;45&lt;/age&gt;\n    &lt;/user&gt;\n    &lt;user&gt;\n      &lt;name&gt;John&lt;/name&gt;\n      &lt;age&gt;25&lt;/age&gt;\n    &lt;/user&gt;\n    &lt;user&gt;\n      &lt;name&gt;Cindy&lt;/name&gt;\n      &lt;age&gt;32&lt;/age&gt;\n    &lt;/user&gt;\n    &lt;user&gt;\n      &lt;name&gt;Alex&lt;/name&gt;\n      &lt;age&gt;15&lt;/age&gt;\n    &lt;/user&gt;\n  &lt;/users&gt;\n</pre>\n\n<p>\n\tGiven that input file, let's see some simple ways to convert it into records.\n</p>\n\n<h4>Convert XML and write to a CSV file</h4>\n<code><pre>var xml2rec=require('xml2rec');\nxml2rec('sample.xml', 'user', 'sample.csv');</pre></code>\nWould write the contents below to sample.csv\n<pre>\n  name, age\n  Peter, 45\n  John, 25\n  Cindy, 32\n  Alex, 15\n</pre>\n\n<h4>Convert XML and write to a JSON file</h4>\n<code><pre>require('xml2rec');\nxml2rec('sample.xml', 'user', 'sample.json');</pre></code>\nWould write JSON records of <code>user</code> to sample.json\n\n<h4>Convert to CSV</h4>\n<code><pre>var xml2rec=require('xml2rec');\nxml2rec('sample.xml', ['user'], {}, (err, rec) => {\n\tconsole.log(rec);\n});</pre></code>\nWould output\n<pre>\n  name, age\n  Peter, 45\n  John, 25\n  Cindy, 32\n  Alex, 15\n</pre>\n\n<h4>Convert to CSV with no heading</h4>\nBy default, CSV files are output with a heading. To not output the heading, you\nwill have to override the default options like so:\n<code><pre>var xml2rec=require('xml2rec');\nxml2rec('sample.xml', ['user'], {heading:false}, (err, rec) => {\n\tconsole.log(rec);\n});</pre></code>\n\nWould output\n<pre>\n  Peter, 45\n  John, 25\n  Cindy, 32\n  Alex, 15\n</pre>\n\n<h4>Convert to JSON</h4>\n<code><pre>var xml2rec=require('xml2rec');\nxml2rec('sample.xml', ['user'], {format:'json'}, (err, rec) => {\n\tconsole.log(JSON.stringify(rec));\n});</pre></code>\n\nWould output\n<pre>\n\t{name:'Peter', age:45}\n\t{name:'John', age:25}\n\t{name:'Cindy', age:32}\n\t{name:'Alex', age:15}\n</pre>\n\n<h2>Features</h2>\nWhen the most common use cases described above does not suffice, the general parameter list below would be the way to go.\nFor example, wanting to convert XML input into some other format, or updating a database, rendering XML via Jade/Pug are some use-cases.\n<code>xml2rec()</code> calls a user supplied callback function cb(err, rec) for every record identified by user supplied list of element name(s).\n<code><pre>xml2rec(input_filename, [element_name1, element_name2, ..], {}, function cb(err, rec) {\n});</pre></code>\nWhere\n<ul>\n\t<li><code>input_filename</code>: is the name of the (large) file that needs to be converted</li>\n\t<li><code>[element_name1, element_name2, ..]</code>: are the list of XML element names in the input file. For each occurrence of the element_name* in the input file, the callback will be called with rec representing the child elements. The type of the object rec depends on the thiird options parameter {}</li>\n\t<li><code>{}</code>: the options parameter\n\t\t<ul>\n\t\t\t<li><code>trimWhiteSpaceTextNodes=true|false</code> // default: true. Nodes that have just white-spaces are treated as empty nodes</li>\n\t\t\t<li><code>trimTrailingSpaces=true|false</code> // default: false. Leading white-spaces in text nodes are removed</li>\n\t\t\t<li><code>trimLeadingSpaces=true|false</code> // default: false. Trailing white-spaces in text nodes are removed</li>\n\t\t\t<li><code>escapeNewLinesInText=true|false</code> // default: false. New lines are replaced with \\n</li>\n\t\t\t<li><code>format='csv'|'json'</code> // default: csv</li>\n\t\t\t<li><code>heading=true|false</code> // default: false</li>\n\t\t\t<li><code>outputAttributes=true|false</code> // default: true. Not implemented yet.</li>\n\t\t</ul>\n\t</li>\n\t<li><code>cb(err, rec): </code> the function to call per parsed record. The value of <code>rec</code> depends on options.fomat's value.\n\t</li>\n</ul>\n\n<p>If preserveWhiteSpaces is true, then the whitespace between XML nodes will be preserved in rec.\nOtherwise, they will be <i>eaten</i>.\nIf format=='csv', the cb()'s rec parameter will be a string --a line with comma separated values,\nwhere each value is the text node of the element_name*'s children.\nIf format=='json', rec would be a JavaScript object representing the elements' children.\nIf heading==true, then before calling cb() for each record, cb() will be called once with rec representing\nthe names of the child elements.</p>\n",
  "readmeFilename": "README",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.26"
}
