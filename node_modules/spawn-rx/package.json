{
  "_args": [
    [
      {
        "raw": "spawn-rx@^2.0.10",
        "scope": null,
        "escapedName": "spawn-rx",
        "name": "spawn-rx",
        "rawSpec": "^2.0.10",
        "spec": ">=2.0.10 <3.0.0",
        "type": "range"
      },
      "/home/pawel/Dokumenty/ElectronAtomJS/Projekty/ftr/node_modules/electron-rebuild"
    ]
  ],
  "_from": "spawn-rx@>=2.0.10 <3.0.0",
  "_id": "spawn-rx@2.0.11",
  "_inCache": true,
  "_location": "/spawn-rx",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/spawn-rx-2.0.11.tgz_1495643465717_0.3784835864789784"
  },
  "_npmUser": {
    "name": "paulcbetts",
    "email": "paul@paulbetts.org"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "spawn-rx@^2.0.10",
    "scope": null,
    "escapedName": "spawn-rx",
    "name": "spawn-rx",
    "rawSpec": "^2.0.10",
    "spec": ">=2.0.10 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/electron-rebuild"
  ],
  "_resolved": "https://registry.npmjs.org/spawn-rx/-/spawn-rx-2.0.11.tgz",
  "_shasum": "65451ad65662801daea75549832a782de0048dbf",
  "_shrinkwrap": null,
  "_spec": "spawn-rx@^2.0.10",
  "_where": "/home/pawel/Dokumenty/ElectronAtomJS/Projekty/ftr/node_modules/electron-rebuild",
  "author": {
    "name": "Paul Betts",
    "email": "paul@paulbetts.org"
  },
  "bugs": {
    "url": "https://github.com/paulcbetts/spawn-rx/issues"
  },
  "dependencies": {
    "debug": "^2.5.1",
    "lodash.assign": "^4.2.0",
    "rxjs": "^5.1.1"
  },
  "description": "An Rx-version of child_process.spawn",
  "devDependencies": {
    "@types/chai": "^3.4.35",
    "@types/chai-as-promised": "0.0.29",
    "@types/mocha": "^2.2.39",
    "@types/node": "^7.0.5",
    "babel-register": "^6.23.0",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "esdoc": "^0.5.2",
    "esdoc-es7-plugin": "0.0.3",
    "esdoc-plugin-async-to-sync": "^0.5.0",
    "marked": "^0.3.6",
    "mocha": "^3.2.0",
    "npm-run-all": "^4.0.2",
    "ts-node": "^2.1.0",
    "tslint": "^4.4.2",
    "typescript": "^2.2.1",
    "uuid": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "65451ad65662801daea75549832a782de0048dbf",
    "tarball": "https://registry.npmjs.org/spawn-rx/-/spawn-rx-2.0.11.tgz"
  },
  "gitHead": "9edfa62fb9e72b814197e2d90f55a7f64fded8ee",
  "homepage": "https://github.com/paulcbetts/spawn-rx",
  "keywords": [
    "spawn",
    "rx"
  ],
  "license": "MIT",
  "main": "lib/src/index.js",
  "maintainers": [
    {
      "name": "paulcbetts",
      "email": "paul@paulbetts.org"
    }
  ],
  "name": "spawn-rx",
  "optionalDependencies": {},
  "readme": "# spawn-rx: A better version of spawn\r\n\r\n| Linux/OSX | Windows |\r\n| --- | --- |\r\n| [![Build Status](https://travis-ci.org/tools-rx/spawn-rx.svg?branch=master)](https://travis-ci.org/tools-rx/spawn-rx) | [![Build status](https://ci.appveyor.com/api/projects/status/xm9xpgma4jwy3xns?svg=true)](https://ci.appveyor.com/project/dfbaskin/spawn-rx) |\r\n\r\n`spawn-rx` is a package that adds an Observable as well as a Promise version of \r\nthe `child_process.spawn` API, and fixes some deficiencies in `spawn` that come \r\nup especially on Windows. For example:\r\n\r\n* `spawn` searches PATH on POSIX platforms but will not on Windows, you need to\r\n  provide an exact path. spawn-rx makes Windows act like other platforms.\r\n  \r\n* On Windows, `{detached: true}` doesn't actually create a process group properly.\r\n  `spawn-rx` provides a `spawnDetached` method that allows you to spawn a detached\r\n  process and kill the entire process group if needed.\r\n  \r\n* POSIX platforms allow you to directly execute scripts that have a shebang at \r\n  the top of the file, whereas Windows can only natively `spawn` EXE files, which\r\n  makes executing npm binaries annoying. `spawn-rx` automatically rewrites your\r\n  `cmd` and `args` parameters for CMD scripts, PowerShell scripts, and node.js\r\n  files.\r\n\r\n## Examples\r\n\r\nspawn-as-promise:\r\n\r\n```js\r\n// Will run down path to find C:\\Windows\\System32\\wmic.exe, whereas normal \r\n// 'spawn' would require an absolute path.\r\nspawnPromise('wmic', [])\r\n  .then((result) => console.log(result));\r\n```\r\n\r\nHandle failed processes as errors:\r\n\r\n```js\r\ntry {\r\n  await spawnPromise('exit', ['-1']);\r\n} catch (e) {\r\n  console.log(\"Processes that return non-zero exit codes throw\")\r\n}\r\n```\r\n\r\nKill running process trees:\r\n\r\n```js\r\nlet disp = spawnDetached('takesALongTime', []).subscribe();\r\nawait Promise.delay(1000);\r\n\r\n// Kill the process and its children by unsubscribing.\r\ndisp.dispose();\r\n```\r\n\r\nStream process output:\r\n\r\n```js\r\nspawn('ls', ['-r'])\r\n  .subscribe(\r\n    (x) => console.log(x), \r\n    (e) => console.log(\"Process exited with an error\"));\r\n```\r\n\r\nExecute scripts:\r\n\r\n```js\r\n// Executes ./node_modules/.bin/uuid.cmd on Windows if invoked via `npm run`\r\nlet result = await spawnPromise('uuid');\r\n```\r\n\r\n\r\n## What's Jobber?\r\n\r\nJobber is a Windows executable that will execute a command in a process group,\r\nand if signaled via a named pipe, will terminate that process group. It's used\r\nin the implementation of `spawnDetached`.\r\n\r\n## Spawn output\r\n\r\nBy default spawn will merge stdout and stderr into the returned observable.\r\nYou can exclude one or the other by passing `ignore` in the `stdio` option of spawn.\r\n\r\nAlternatively if you call it with `{ split: true }` option, the observable output\r\n will be an object `{ source: 'stdout', text: '...' }` so you can distinguish\r\n the outputs.\r\n\r\n## Stdin support\r\n\r\nIf you provide an `observable<string>` in `opts.stdin`, it'll be subscribed upon\r\n and fed into the child process stdin. Its completion will terminate stdin stream.\r\n\r\n## Methods\r\n\r\n```js\r\n/**\r\n * Spawns a process attached as a child of the current process. \r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Observable<string>}       Returns an Observable that when subscribed\r\n *                                    to, will create a child process. The\r\n *                                    process output will be streamed to this\r\n *                                    Observable, and if unsubscribed from, the\r\n *                                    process will be terminated early. If the\r\n *                                    process terminates with a non-zero value,\r\n *                                    the Observable will terminate with onError.\r\n */\r\nfunction spawn(exe, params=[], opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process but detached from the current process. The process is put \r\n * into its own Process Group that can be killed by unsubscribing from the \r\n * return Observable.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Observable<string>}       Returns an Observable that when subscribed\r\n *                                    to, will create a detached process. The\r\n *                                    process output will be streamed to this\r\n *                                    Observable, and if unsubscribed from, the\r\n *                                    process will be terminated early. If the\r\n *                                    process terminates with a non-zero value,\r\n *                                    the Observable will terminate with onError.\r\n */\r\nfunction spawnDetached(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process as a child process.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Promise<string>}       Returns an Promise that represents a child\r\n *                                 process. The value returned is the process \r\n *                                 output. If the process terminates with a \r\n *                                 non-zero value, the Promise will resolve with \r\n *                                 an Error.\r\n */\r\nfunction spawnPromise(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Spawns a process but detached from the current process. The process is put \r\n * into its own Process Group.\r\n * \r\n * @param  {string} exe               The executable to run\r\n * @param  {Array<string>} params     The parameters to pass to the child\r\n * @param  {Object} opts              Options to pass to spawn.\r\n *\r\n * @return {Promise<string>}       Returns an Promise that represents a detached \r\n *                                 process. The value returned is the process \r\n *                                 output. If the process terminates with a \r\n *                                 non-zero value, the Promise will resolve with \r\n *                                 an Error.\r\n */\r\nfunction spawnDetachedPromise(exe, params, opts=null)\r\n```\r\n\r\n```js\r\n/**\r\n * Finds the actual executable and parameters to run on Windows. This method \r\n * mimics the POSIX behavior of being able to run scripts as executables by \r\n * replacing the passed-in executable with the script runner, for PowerShell, \r\n * CMD, and node scripts.\r\n *\r\n * This method also does the work of running down PATH, which spawn on Windows\r\n * also doesn't do, unlike on POSIX.\r\n * \r\n * @param  {string} exe           The executable to run\r\n * @param  {Array<string>} args   The arguments to run\r\n *\r\n * @return {Object}               The cmd and args to run\r\n * @property {string} cmd         The command to pass to spawn\r\n * @property {Array<string>} args The arguments to pass to spawn\r\n */\r\nfunction findActualExecutable(exe, args)\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paulcbetts/spawn-rx.git"
  },
  "scripts": {
    "build": "npm-run-all compile lint test",
    "compile": "tsc",
    "doc": "echo \"esdoc may not work correctly\" && esdoc -c ./esdoc.json",
    "lint": "tslint \"src/**/*.ts\" \"test/**/*.ts\"",
    "prepublish": "npm run compile",
    "test": "mocha --compilers ts:ts-node/register ./test/*"
  },
  "typings": "lib/src/index.d.ts",
  "version": "2.0.11"
}
